# Подмножества и надмножества
# Метод issubset()
# Для определения, является ли одно из множеств подмножеством другого, используется метод issubset()
print('####################')
set1 = {2, 3}
set2 = {1, 2, 3, 4, 5, 6}
print(set1.issubset(set2))

# Для определения, является ли одно из множеств подмножеством другого, также применяются операторы <= (нестрогое подмножество) и < (строгое подмножество)
print('####################')
set1 = {2, 3}
set2 = {1, 2, 3, 4, 5, 6}
print(set1 <= set2)

# Метод issuperset()
# Для определения, является ли одно из множеств надмножеством другого, используется метод issuperset()
print('####################')
set1 = {'a', 'b', 'c', 'd', 'e'}
set2 = {'c', 'e'}
print(set1.issuperset(set2))

# Для определения, является ли одно из множеств надмножеством другого, также применяются операторы >= (нестрогое надмножество) и > (строгое надмножество)
print('####################')
set1 = {'a', 'b', 'c', 'd', 'e'}
set2 = {'c', 'e'}
print(set1 >= set2)

# Метод isdisjoint()
# Для определения отсутствия общих элементов в множествах используется метод isdisjoint()
print('####################')
set1 = {1, 2, 3, 4, 5}
set2 = {5, 6, 7}
set3 = {7, 8, 9}
print(set1.isdisjoint(set2))
print(set1.isdisjoint(set3))
print(set2.isdisjoint(set3))

# Методы issuperset(), issubset(), isdisjoint() могут принимать в качестве аргумента не только множество (тип данных set), но и любой итерируемый объект (список, строку, кортеж)

# Операторы >, <, >=, <= требуют наличия в качестве операндов множества