# Поднятие и опускание пера
# Исходная роботизированная черепашка, использованная преподавателем Сеймуром Пейпертом, лежала на большом листе бумаги и имела перо, которое можно было поднимать и опускать. Когда перо было опущено на бумагу, оно чертило линию во время перемещения черепашки. Когда перо поднималось, оно не касалось бумаги, и черепашка во время движения не оставляла за собой линии.
# Команда turtle.penup() поднимает перо, а команда turtle.pendown() – опускает. Когда перо поднято, черепашка перемещается не оставляя линии. Когда перо опущено, черепашка во время перемещения чертит линию. По умолчанию перо опущено.
import turtle
turtle.forward(50)
turtle.penup()
turtle.forward(25)
turtle.pendown()
turtle.forward(50)
turtle.penup()
turtle.forward(25)
turtle.pendown()
turtle.forward(50)

# Рисование кругов и точек
# Чтобы черепашка нарисовала круг, можно применить команду turtle.circle(). Такая команда рисует круг заданного в виде аргумента в пикселях радиуса.
# Например, команда turtle.circle(80) побуждает черепашку нарисовать круг с радиусом 80 пикселей.
import turtle
turtle.circle(80)

# Рисование кругов и точек
# Команда turtle.dot() применяется, чтобы черепашка нарисовала точку.
# рисуем три точки на одной прямой с расстоянием в 50 пикселей между ними.
import turtle
turtle.dot()
turtle.forward(50)
turtle.dot()
turtle.forward(50)
turtle.dot()
turtle.forward(50)

# Изменение размера пера
# Для изменения ширины пера черепашки в пикселях можно применить команду turtle.pensize(). Аргумент команды – целое число, задает ширину пера.
# Приведенный ниже код устанавливает ширину пера в 55 пикселей и затем рисует круг:
import turtle
turtle.pensize(5)
turtle.circle(80)

# Изменение цвета рисунка
# Для изменения цвета рисунка можно применить команду turtle.pencolor(). Аргумент команды – строковое представление названия цвета.
# Приведенный ниже код меняет цвет рисунка на красный и затем рисует круг:
import turtle
turtle.pencolor('red')
turtle.circle(80)
# С командой turtle.pencolor() можно использовать многочисленные предопределенные названия цветов.
'''
Наиболее широко используемые названия цветов:
	red (красный);
	green (зеленый);
	bluе (синий);
	yellow (желтый);
	cyan (сине-зелёный).
'''
# Команда turtle.pencolor() позволяет работать не только с предопределенными названиями цветов, но и с цветами, заданными в формате RGB (Red Green Blue). В качестве аргумента команды turtle.pencolor() можно использовать либо кортеж из 33 чисел (r, g, b), либо просто три числа r, g, b.
import turtle
turtle.Screen().colormode(255)
#  строковое представление цвета
turtle.pencolor('red')
turtle.circle(90)
#  кортеж (r, g, b)
color = (13, 56, 240)
#  кортеж в качестве аргумента
turtle.pencolor(color)
turtle.circle(80)
#  значения r, g, b в качестве аргументов
turtle.pencolor(130, 240, 200)
turtle.circle(50)
# В Python 3 для того, чтобы использовать цвет в формате RGB, нужно предварительно установить значение colormode в 255255, для этого нужно использовать команду turtle.Screen().colormode(255).

# Изменение цвета фона
# Для изменения фонового цвета графического окна можно применить команду turtle.Screen().bgcolor(). В этом случае тоже можно использовать цвета с предопределенными названиями или задать цвет в RGB формате.
# Приведенный ниже код меняет цвет фона на серый, цвет рисунка на зеленый и затем рисует круг:
import turtle
turtle.Screen().bgcolor('gray')
turtle.pencolor('green')
turtle.circle(80)
# Мы также можем установить фоновое изображение с помощью команды turtle.Screen().bgpic().
import turtle
# устанавливаем размер граф. окна
turtle.Screen().setup(400, 400)
# добавляем форму черепашки
turtle.Screen().addshape('rocketship.png')
# устанавливаем фоновое изображение
turtle.Screen().bgpic('space.jpg')
# устанавливаем форму черепашки
turtle.shape('rocketship.png')
turtle.pencolor('green')
turtle.pensize(5)
for _ in range(4):
  turtle.forward(150)
  turtle.left(90)
  
# Создание штампа
# С помощью команды turtle.stamp() можно оставить штамп черепашки. Использование команды turtle.stamp() производит тот же эффект, что и команда turtle.dot(), но оставляет отметку в форме черепашки.
import turtle
turtle.shape('turtle')
for i in range(3):
    turtle.forward(50)
    turtle.stamp()
    
# Возвращение экрана в исходное состояние
'''
Для возвращения графического окна черепашки в исходное состояние существуют три команды:
	turtle.clear();
	turtle.reset();
	turtle.clearscreen().
'''
# Команда turtle.clear() стирает все рисунки в графическом окне. Но не меняет положение черепашки, цвет рисунка и цвет фона графического окна.# Команда turtle.reset() стирает все рисунки, имеющиеся в графическом окне, задает черный цвет рисунка и возвращает черепашку в исходное положение в центре экрана. Эта команда не переустанавливает цвет фона графического окна.
# Команда turtle.clearscreen() стирает все рисунки в графическом окне, меняет цвет рисунка на черный, а цвет фона на белый, и возвращает черепашку в исходное положение в центре графического окна.

# Примечания
# Примечание 1. Для установления размера графического окна можно применить команду turtle.Screen().setup(). Аргументы команды – ширина и высота (в пикселях).
# Приведенный ниже код создает графическое окно шириной 640 \times 480640×480 пикселей:
import turtle
turtle.Screen().setup(640, 480)