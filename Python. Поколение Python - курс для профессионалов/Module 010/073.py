'''
Задача о рюкзаке
Вам доступен список items, содержащий набор предметов. Каждый предмет представлен 
в виде именованного кортежа и имеет три параметра — название, массу (в граммах) 
и ценность (в рублях). Также имеется рюкзак определённой грузоподъёмности.

Напишите программу, которая определяет, какие предметы из представленного набора 
следует взять, чтобы собрать рюкзак с максимальной ценностью предметов внутри, 
соблюдая при этом весовое ограничение рюкзака.

Формат входных данных
На вход программе в первой строке подается число — грузоподъемность рюкзака (в граммах).

Формат выходных данных
Программа должна определить какие предметы из представленного набора следует взять, 
чтобы собрать рюкзак с максимальной ценностью предметов внутри, соблюдая при 
этом весовое ограничение рюкзака, и вывести названия полученных предметов 
в лексикографическом порядке, каждое на отдельной строке. Если рюкзак не позволяет 
взять ни один предмет, программа должна вывести текст:

Рюкзак собрать не удастся

Примечание 1. Рюкзак не обязательно должен быть наполнен полностью.

Примечание 2. Подробнее с задачей о рюкзаке можно ознакомиться по ссылке.
https://ru.wikipedia.org/wiki/Задача_о_рюкзаке

Примечание 3. Тестовые данные доступны по ссылкам:

Архив с тестами
https://stepik.org/media/attachments/lesson/680669/tests_2817311.zip

GitHub
https://github.com/python-generation/Professional/tree/main/Module_10/Module_10.12/Module_10.12.14

from collections import namedtuple
import itertools
Item = namedtuple('Item', ['name', 'mass', 'price'])
items = [Item('Обручальное кольцо', 7, 49_000),
         Item('Мобильный телефон', 200, 110_000),
         Item('Ноутбук', 2000, 150_000),
         Item('Ручка Паркер', 20, 37_000),
         Item('Статуэтка Оскар', 4000, 28_000),
         Item('Наушники', 150, 11_000),
         Item('Гитара', 1500, 32_000),
         Item('Золотая монета', 8, 140_000),
         Item('Фотоаппарат', 720, 79_000),
         Item('Лимитированные кроссовки', 300, 80_000)]

Sample Input 1:
500
Sample Output 1:
Золотая монета
Мобильный телефон
Наушники
Обручальное кольцо
Ручка Паркер

Sample Input 2:
1
Sample Output 2:
Рюкзак собрать не удастся

Sample Input 3:
10
Sample Output 3:
Золотая монета
'''
from __future__ import annotations
from _collections_abc import Generator, Iterator, Iterable, Callable
import itertools as it

from collections import namedtuple
Item = namedtuple('Item', ['name', 'mass', 'price'])
items = [Item('Обручальное кольцо', 7, 49_000),
         Item('Мобильный телефон', 200, 110_000),
         Item('Ноутбук', 2000, 150_000),
         Item('Ручка Паркер', 20, 37_000),
         Item('Статуэтка Оскар', 4000, 28_000),
         Item('Наушники', 150, 11_000),
         Item('Гитара', 1500, 32_000),
         Item('Золотая монета', 8, 140_000),
         Item('Фотоаппарат', 720, 79_000),
         Item('Лимитированные кроссовки', 300, 80_000)]

if __name__ == '__main__':
    m = int(input())
    n = len(items)
    res = None
    res_price = None

    for i in range(1, n+1):
        for combs in it.combinations(items, i):
            mass = sum(i.mass for i in combs)
            price = sum(i.price for i in combs)
            if not res and mass <= m:
                res = combs
                res_price = price
            elif res and mass <= m and res_price <= price: ### подумать
                res = combs
    if res:
        print(*sorted(res), sep='\n')
    else:
        print('Рюкзак собрать не удастся')