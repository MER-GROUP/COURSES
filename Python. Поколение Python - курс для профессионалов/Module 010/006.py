'''
Функция starmap()
Как известно, функция map() принимает функцию и итерируемый объект и возвращает итератор, 
элементами которого являются элементы итерируемого объекта, к которым была применена 
переданная функция. Нередко элементами итерируемого объекта являются 
коллекции (списки, кортежи, ..), тогда внутри переданной функции нам приходится 
обращаться к каждому элементу этих коллекций по индексу. Например:

persons = [('Timur', 'Guev'), ('Arthur', 'Kharisov')]

full_names = map(lambda tup: tup[0] + ' ' + tup[1], persons)

Было бы удобно иметь функцию, назовем ее starmap(), которая бы принимала функцию 
не с одним аргументом, а с несколькими — каждым элементом коллекции:

persons = [('Timur', 'Guev'), ('Arthur', 'Kharisov')]

full_names = starmap(lambda name, surname: f'{name} {surname}', persons)

Реализуйте функцию starmap() с использованием функции map(), которая принимает 
два аргумента:

func — функция
iterable — итерируемый объект, элементами которого являются коллекции

Функция starmap() должна работать аналогично функции map(), то есть возвращать итератор, 
элементами которого являются элементы итерируемого объекта iterable, к которым была 
применена функция func, с единственным отличием: func должна принимать не один 
аргумент — коллекцию (элемент iterable), а каждый элемент этой коллекции в качестве 
самостоятельного аргумента.

Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую 
функцию starmap(), но не код, вызывающий ее.

Примечание 2. Тестовые данные доступны по ссылкам:

Архив с тестами
https://stepik.org/media/attachments/lesson/640044/tests_2765795.zip
GitHub
https://github.com/python-generation/Professional/tree/main/Module_10/Module_10.2/Module_10.2.24

Sample Input 1:
pairs = [(1, 3), (2, 5), (6, 4)]
print(*starmap(lambda a, b: a + b, pairs))
Sample Output 1:
4 7 10

Sample Input 2:
points = [(1, 1, 1), (1, 1, 2), (2, 2, 3)]
print(*starmap(lambda x, y, z: x * y * z, points))
Sample Output 2:
1 2 12
'''
"""
Сначала мы распоковывеам списк и получаем (1, 3) (2, 5) (6, 4) потомом zip 
мы собираем это в (1, 2, 6) и (3, 5, 4) а потом уже lambda функцией складываем 
по очереди элементы 1 + 3, 2 + 5 и 6 + 4)
"""
def starmap(func: callable, iterable: iter):
    return map(func, *zip(*iterable))
    # return map(func, *iterable) # error

if __name__ == '__main__':
    pairs = [(1, 3), (2, 5), (6, 4)]
    print(*starmap(lambda a, b: a + b, pairs))

    points = [(1, 1, 1), (1, 1, 2), (2, 2, 3)]
    print(*starmap(lambda x, y, z: x * y * z, points))