# Статические методы класса объявляются
# с помощью декоратора @staticmethod.
# В статические методы не передается
# ни объект-экземпляр, ни объект-класс.
# Этот класс не имеет статических методов.
class A:
    def __init__(self):
        self.prop = 0

    def func0(self):
        print(self.prop)

    def func1(self):
        print(self)
		
if __name__ == '__main__':
	def main():
		a = A()
		# В качестве первого аргумента передается
		# объект-экземпляр a
		a.func0()  # 0
		a.func1()  # <__main__.A object at 0x7f8abd437208>
		
		# Если обычный метод вызвать на класс,
		# то объект-класс не передается
		# в качестве первого аргумента.
		# В данном случае функция ждет один аргумент,
		# а мы ничего ей не передаем.
		# A.func1() - ERROR
		
		A.func1(6)
		# Несмотря на то, что в классе нет статических методов,
		# с помощью функции staticmethod() мы можем
		# превратить обычный метод (или функцию) в статический.
		A.func1 = staticmethod(A.func1)
		# Статический метод класса можно вызывать
		# как на класс, так и на экземпляр.
		# В любом случае ни класс,
		# ни объект в нее не передаются.
		A.func1(5)
		a.func1(9)
		
		# Статический метод ожидает явной передачи аргументов
		# a.func1() - ERROR
		
		def func(n):
		    print(n)
		# В статический метод класса можно
		# превратить обычную функцию
		A.func2 = staticmethod(func)
		A.func2(45)
		a.func2(78)
		
	main()