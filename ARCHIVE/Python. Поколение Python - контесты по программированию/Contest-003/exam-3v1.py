'''
Зеркальный мир
Один странный доктор научился путешествовать в мир, который очень похож на наш, 
однако в нем все объекты отражены горизонтально. Все, что попадает в этот мир 
из реального, тоже «отзеркаливается», но доктор изобрел специальные ящики, 
содержимое которых остается в изначальном состоянии после переноса в новый мир.

Ящики выглядят как прямоугольники разных размеров, у которых нижняя 
и верхняя части обозначены символом _, а стенки — символом |. 
Содержимое ящиков состоит из букв латинского алфавита в произвольном 
регистре и цифр. Все пустое пространство на складе составляют символы .. Стенки, 
нижние и верхние части у ящиков могут совпадать.

Напишите программу, которая показывает, как будут выглядеть ящики после 
их переноса в зеркальное измерение.

Формат входных данных
В первой строке программе подается два числа n и m — высота и ширина склада 
с ящиками соответственно, где 1 ≤ n,m ≤ 99. В последующих n строках 
длины m изображается склад с ящиками, структура которого описана в условии задачи.

Формат выходных данных
Программа должна вывести n строк длины m — состояние склада после 
его переноса в зеркальный мир с отраженными по горизонтали ящиками, 
содержимое которых отражено не было.

Примечание 1. Гарантируется, что входные данные всегда корректны.

Примечание 2. Тестовые данные доступны по ссылке.
https://stepik.org/media/attachments/lesson/718107/tests_3019842.zip

Sample Input 1:
9 9
.___.....
|123|__..
|456|AB|.
|___|CD|.
|XYZ|__|.
|___|....
......_..
._...|0|.
|_|..|_|.
Sample Output 1:
.....___.
..__|123|
.|AB|456|
.|CD|___|
.|__|XYZ|
....|___|
.._......
.|0|..._.
.|_|..|_|

Sample Input 2:
3 4
._..
|x|.
|_|.
Sample Output 2:
.._.
.|x|
.|_|

Sample Input 3:
5 7
.__....
|85|...
|__|__.
...|aA|
...|__|
Sample Output 3:
....__.
...|85|
.__|__|
|aA|...
|__|...

'''
class Mir:
    def __init__(self, *args: list) -> None:
        self.arr = [input() for _ in range(args[0])]
        self.algo(self.arr)

    def algo(self, arr: list) -> None:
        arr = [i[::-1] for i in arr]
        for i, string in enumerate(arr):
            idx = string.find('|')
            while not (-1 == idx):
                idx_next = string.find('|', idx + 1)
                if (-1 == idx_next):
                    break
                else:
                    arr[i] = arr[i][: idx] + arr[i][idx : idx_next + 1][::-1] + arr[i][idx_next + 1 :] 
                idx = string.find('|', idx + 1)
        self.print_arr(arr)

    def print_arr(self, arr: list) -> None:
        for line in arr:
            print(line)

if __name__ == '__main__':
    Mir(*map(int, input().split()))