'''
Одинаковые суммы
Напишите программу, которая проверяет, возможно ли разбить данный набор чисел на два непустых набора с одинаковой суммой.

Формат входных данных
На вход программе последовательность натуральных чисел, разделенных пробелом, которые представляют исходный набор. Количество чисел в последовательности не превышает 10000.

Формат выходных данных
Программа должна вывести True, если введенный набор чисел возможно разбить на два непустых набора с одинаковой суммой, или False в противном случае.

Примечание 1. При разбиении должны быть использованы все числа исходного набора.

Примечание 2. Рассмотрим первый тест. Имеем следующий исходный набор чисел:
1,2,3,4,6

Данный набор можно разбить на два следующих набора:
1,3,4 и 2,6

Оба набора имеют одинаковую сумму, равную 8.

Примечание 3. Тестовые данные доступны по ссылке.
https://stepik.org/media/attachments/lesson/718107/tests_3019844.zip

Sample Input 1:
1 2 3 4 6
Sample Output 1:
True

Sample Input 2:
4 6
Sample Output 2:
False

Sample Input 3:
4 2 5 2 7 3 9 3 6 2 3 43 1 44 123 1
Sample Output 3:
True
'''
# Решение
from itertools import combinations

def find_partition(int_list):
    """
    Решение методом полного перебора всех допустимых вариантов
    Время работы O(n log n)
    """
    lst = sorted(int_list, reverse=True)
    n = len(lst)
    sum_0_5 = sum(lst) // 2

    # нахождение минимальной длины набора - если набор меньше, 
    # то он в любом случае не подойдет
    b_min = 0 
    while sum(lst[:b_min]) < sum_0_5:
        b_min += 1           

    if sum(lst) % 2 != 0 or len(lst) <= 1:
        return False
    else:
        # максимальная длина набора - n // 2
        for b in range(b_min, n // 2 + 1): 
            nabor = combinations(lst, b)
            for elem in nabor:            
                if sum(elem) == sum_0_5:
                    return True
        else:
            return False

if __name__ == '__main__':
    print(find_partition(list(map(int, input().split()))))