'''
Самое скучное условие
Зачастую из-за непонятных условий сложно понять суть задачи, 
поэтому иногда лучше написать коротко и по делу.

Напишите программу, которая находит длину самого длинного палиндрома, 
который можно составить из букв в строке.

Формат входных данных
На вход программе подается одна строка, 
состоящая из строчных латинских букв.

Формат выходных данных
Программа должна вывести одно число — длину самого длинного палиндрома, 
который можно составить из букв в введенной строке.

Примечание 1. Палиндром читается одинаково в обоих направлениях, 
например, слово «rotavator».

Примечание 2. Рассмотрим первый тест. Из букв a, b, a, b, q, t, и d можно 
составить палиндром, например, abqba, длина которого равна 55. 
Палиндром большей длины из данных букв составить нельзя.

Sample Input 1:

ababqtd
Sample Output 1:

5
Sample Input 2:

bebebe
Sample Output 2:

5
Sample Input 3:

qaaaaaaaab
Sample Output 3:

9
'''

'''
Главная идея: самый большой палиндром можно составить, 
если каждую букву брать четное количество. 
Тогда справа и слева можно расположить одинаковое количество 
одинаковых букв. Есть еще один нюанс, одну из букв мы можем взять 
нечетное число раз и расположить по центру, как например в строке 
abbba, букв a - четное количество, букв b - нечетное количество. 
'''
# авторское решение
class Algo:
    def __init__(self, s) -> None:
        self.__algo(s)

    def __algo(self, s):
        import collections
        dict1 = collections.Counter(s)
        flag, result = False, 0
        for key in dict1:
            if dict1[key] % 2 == 1:
                flag = True
            result += dict1[key] - dict1[key] % 2
        if flag:
            result += 1
        print(result)

if __name__ == '__main__':
    Algo(input())