# INPUT DATA:

# TEST_1:
@ignore_exception(ZeroDivisionError, TypeError, ValueError)
def f(x):
    return 1 / x
    
f(0)

# TEST_2:
min = ignore_exception(ZeroDivisionError)(min)

try:
    print(min(1, '2', 3, [4, 5]))
except Exception as e:
    print(type(e))

# TEST_3:
@ignore_exception()
def func():
    '''func docs'''
    raise ValueError
  
try:    
    func()
except Exception as e:
    print(type(e))

# TEST_4:
@ignore_exception(TypeError)
def func():
    '''func docs'''
    raise ValueError
  
try:    
    func()
except Exception as e:
    print(type(e))

# TEST_5:
@ignore_exception(ValueError, TypeError, NameError)
def func():
    '''func docs'''
    raise ValueError
 
print(func.__name__)
print(func.__doc__)

try:    
    func()
except Exception as e:
    print(type(e))

# TEST_6:
@ignore_exception(ValueError, TypeError, NameError)
def func():
    '''func docs'''
    raise NameError
 
try:    
    func()
except Exception as e:
    print(type(e))

# TEST_7:
@ignore_exception(ValueError, TypeError, ZeroDivisionError, NameError)
def func():
    '''func docs'''
    raise ZeroDivisionError
 
try:    
    func()
except Exception as e:
    print(type(e))

# TEST_8:
@ignore_exception(ValueError, NameError, ZeroDivisionError, TypeError)
def func(a, b, c):
    '''func docs'''
    raise NameError
 
try:    
    func(1, 2, c=10)
except Exception as e:
    print(type(e))

# TEST_9:
@ignore_exception(ValueError, TypeError, ZeroDivisionError, NameError)
def beegeek():
    return 'beegeek'
    
print(beegeek())
