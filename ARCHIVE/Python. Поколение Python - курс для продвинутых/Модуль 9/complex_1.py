# Комплексные числа в Python
'''
В языке Python есть возможность работать с комплексными числами. Общая форма представления комплексного числа следующая: real + imag j, где

real – вещественная часть комплексного числа;
imag – мнимая часть комплексного числа, которая завершается символом j или J
'''
# Обратите внимание: в Python используется буква j, а не i.
print('####################')
z1 = 5 + 7j
z2 = 1j
z3 = -3 + 5J
z4 = 1.5 + 3.2j

print(z1, z2, z3, z4, sep='\n')
print(type(z1))

# Создание комплексных чисел
# Комплексные числа можно создать с помощью литерала, как выше, а можно с помощью функции complex(), которая принимает два аргумента: вещественную и мнимую часть числа, либо строковое представление числа.
print('####################')
# создание на основе литерала
z1 = -3 + 2j
# z2 = 6 - 8j
z2 = complex(6, -8)
# z3 = 2.5j
z3 = complex(0, 2.5)
# z4 = 5 + 0j
z4 = complex(5, 0)
# создание на основе строки
z5 = complex('3+4j')

print(z1, z2, z3, z4, z5, sep='\n')

# Арифметические операции над комплексными числами
# Тип данных complex отлично интегрирован в язык Python. С complex числами работают все привычные операции: сложение, вычитание, умножение, деление, возведение в степень.
print('####################')
z1 = 1 + 3j
z2 = -3 + 2j

print('z1 + z2 =', z1 + z2)
print('z1 - z2 =', z1 - z2)
print('z1 * z2 =', z1 * z2)
print('z1 / z2 =', z1 / z2)
print('z1^20 =', z1**20)

# Мы также можем совершать арифметические операции над complex и целыми числами (миксовать complex, int, float).
print('####################')
z = 1 + 3j

print(z + 5)
print(z - 2)
print(3*z)
print(z/2)

# Методы и свойства комплексных чисел
# Для получения действительной и мнимой частей комплексного числа используются свойства real и imag.
print('####################')
z = 3+4j

print('Действительная часть =', z.real)
print('Мнимая часть =', z.imag)
# Python представляет комплексное число как два вещественных числа, поэтому при выводе у нас появились выражения 3.0 и 4.0 вместо 3 и 4.

# Для нахождения сопряженного комплексного числа, можно использовать метод conjugate().
print('####################')
z = 3+4j

print('Сопряженное число =', z.conjugate())

# Примечания
# Примечание 1. Для нахождения модуля комплексного числа, используется встроенная функция abs().
print('####################')
z = 3+4j

print('Модуль числа =', abs(z))

# Примечание 2. Встроенный модуль math работает с вещественными числами. Для работы с комплексными числами есть модуль cmath. Модуль cmath включает дополнительные функции для использования комплексных чисел.
print('####################')
import cmath

z = 2+3j
# полярный угол
print(cmath.phase(z))
# полярные координаты
print(cmath.polar(z))
'''
Модуль cmath содержит следующие категории функций:

Экспоненциальные и логарифмические функции

Квадратные корни

Тригонометрические функции и их обратные

Гиперболические функции и их обратные
'''

# Примечание 3. Для работы с комплексными числами (тип complex) не нужно подключать какой-либо модуль, в отличии от типа Decimal и Fraction.