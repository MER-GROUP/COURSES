1) после создания главного класса идёт объявление 3х проверочных функций judge, внутри которых по одной строчке кода - return условия (true/false)  



2) следующая __init__,  в которой аргументы   это и так написано в комментариях, дублирую - (self,iterable,*funcs,judge=judge_any), а в теле - селфы, причем  self.judje=judje, a новый self.index=0 (счетчик)



3) __iter__ (self): в теле возвращает себя. всё.



4) последняя __next__(self):    в теле:



def __next__(self):
self.pos = ... #при каждой проверке нового числа обнуляем значения
... = ...
if self.index < len(self.iterable): #проходим по всему числам из диапазона
... #увеличиваем индекс
... #здесь создаем обычный цикл for, проходящий по внешним функциям mul (а помним что они у нас означают funcs), увеличиваем pos (true) or neg (false)
...
...
...
...
if self.judge(..., ...): # отправляем на проверку установленного фильтра judge c найденным кол-вом pos neg
... #возвращаем число по индексу - оно и будет показано при print
else:
return self.__next__()
... #бросаем исключение которое останавливает итерацию

 



5) Ну и конечно внешние функции, как и в примере: здесь всё без изменений  def mul2, mul3,mul5, a, 3 printa и т.д.



6) отправлять в решение нужно код без внешних функций mul, списка a, и принтов



7) и ещё раз в данном решении - помните про вездесущий  self


... #здесь создаем обычный цикл for, проходящий по внешним функциям mul (а помним что они у нас означают funcs), увеличиваем pos (true) or neg (false)

В вашем случае:



1) последний else не нужен - просто оставьте райсз стопитерейшн



2) for f in self.funcs: вместо ваших if\else на каждую отдельную функцию проходим по всем функциям сразу (попробуйте - получится)


комментарий классный
https://stepik.org/lesson/24464/step/4?discussion=946439&unit=6769

test

lst = [i for i in range(-50, 50)]

test_base = [
    -50, -48, -46, -45, -44, -42, -40, -39, -38, -36, -35, -34, -33, -32, -30, -28, -27, -26, -25, -24, -22,
    -21, -20, -18, -16, -15, -14, -12, -10, -9, -8, -6, -5, -4, -3, -2, 0, 2, 3, 4, 5, 6, 8, 9, 10, 12, 14,
    15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48
]

test_half = [-50, -48, -45, -42, -40, -36, -30, -24, -20, -18, -15, -12, -10,
             -6, 0, 6, 10, 12, 15, 18, 20, 24, 30, 36, 40, 42, 45, 48]

test_all = [-30, 0, 30]

assert list(multifilter(lst, mul2, mul3, mul5)) == test_base
assert list(multifilter(lst, mul2, mul3, mul5, judge=multifilter.judge_half)) == test_half
assert list(multifilter(lst, mul2, mul3, mul5, judge=multifilter.judge_all)) == test_all
