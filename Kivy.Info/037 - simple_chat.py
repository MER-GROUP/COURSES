Простой чат

Напишем простой чат. Напишем два файла python server.py и client.py.
Файл server.py не будет иметь пользовательского интерфейса. Это простой сервер который будет принимать подключения от клиентов и сообщения. От клиента будет приходить сообщения на сервер а сервер перешлет это сообщения всем подлкюченным клиентам.
Файл client.py будет иметь пользовательский интерфейс который мы напишем на Kivy. Мы будем использовать модуль socket. В server.py мы напишем сокет к которому привяжем ip и port чтобы клиенту могли по этому ip и port подключаться. Так же напишем чтобы сокет постоянно прослушивал входящие сообщения от клиентов и отправлял их всем клиентам
В client.py мы напишем чтобы сокет подключался по протоколу TCP и подключался по тому ip и port который у сервера. И так же напишем чтобы этот же сокет принимал сообщения от сервера и выводил их в Label с сообщениями. Так же будут приходить от сервера сообщения кто подключился к чату и кто вышел из чата
Сначало напишем файл sever.py. Импоритруем два модуля socket и threading

Далее напишем сокет. Создадим его по протоколу TCP, присвоим ip компа на котором запустим сервер с помощью socket.gethostbyname(socket.gethostname()) и напишем порт. Далее привяжем к сокету ip и порт. У сокета вызовем метод listen для того чтобы прослушивать входящие подключения

Далее создадим пустой список клиентов и user_list(этот список мы будем передавать клиентам и сбоку в клиенте будет отображаться список пользователей).Так же выведем в консоли сообщение на каком ip и порту сервер запущен

Далее напишем метод где сервер будет отправлять всем подключенным клиентам данные полученные от одного клиента

Далее напишем метод message_handler который в качестве параметра будет принимать клиента. Этот метод нужен для приема сообщений от клиента и будет вызываться в отдельном потоке.Почему в отдельном потоке? Дело в том что если мы запустим сервер с одним потоком то он будет ждать входящие подключения и когда клиент будет отсылать сообщения он не будет на это реагировать так как у него лишь один поток где он принимает входящие подключения от клиентов, поэтому мы создаем отельный поток где сервер будет принимать сообщения и отсылать их клиентам
Пишем метод message_handler
 
Далее напишем метод accept_connection который будет принимать входящие подключения
   
Далее пишем что при запуске файла будет вызываться метод accept_connection

С файлом server.py всё. Теперь напишем файл client.py. В этом файле мы будем использовать Kivy. Так же импортируем модули socket и threading

Далее импортируем класс App и классы виджетов Kivy

Далее импортируем из модуля graphics два класса Color и Rectangle. Они нужны нам чтобы нарисовать прямоугольник заданного цвета.Мы будем рисовать его где будет находиться Label со списком пользователей

Импортируем виджет ScrollView для прокрутки Label c сообщениями. Там же импортируем свойство для строк StringProperty

И так же испортируем класс Builder из модуля lang для разметки прокручиваемого Label с сообщениями

Далее пишем разметку для прогручиваемого Label с сообщениями, пишем класс ScrollableLabel и наследуем его от класса ScrollView

Пишем класс ClientApp

Далее в этом классе ClientApp пишем метод build который будет инициализировать все виджеты
     
Далее в этом же классе ClientApp пишем метод receive_message который будет принимать сообщения и список пользователей
 
Далее в этом же классе ClientApp пишем метод для отправки сообщения на сервер

Далее в этом же классе ClientApp пишем метод on_text

Далее в этом же классе ClientApp пишем метод on_stop. Этот метод вызывается когда мы закрываем приложение. Нужно чтобы когда клиент закрыл приложение то сервер получил сообщение что клиент покинул чат и передал это сообщение всем подключенным клиентам

Далее в этом же классе ClientApp пишем метод подключения к серверу connect_to_server
      
C классом ClientApp все. Далее пишем код чтобы при заупске файла вызывался метод run у класса ClientApp

Если вы все написали правильно то при запуске файла client.py должен открыться такое окно с клиентом

Итак проверяем наш чат. Запустите консоль и запустим сервер. Введите в консоли команду python server.py. Далее когда сервер запуститься нам нужно будет посмотреть ip и порт сервера в консоли

Далее откройте вторую консоль где запустим окно клиента. Введите команду python client.py. Введем никнейм(имя пользователя), ip сервера и порт сервера который написан в консоли у сервера. Далее нажмите на кнопку подключиться к серверу

Далее запустим еще одну консоль где запустим еще одного клиента. Введите так же в консоли команду python client.py и подключитесь к серверу как мы подключались с первым клиентом

