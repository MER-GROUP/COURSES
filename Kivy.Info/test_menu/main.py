# *****************************************************************************************
# импорт основного окна App
from kivy.app import App
# импорт модуля Строитель - загружает .kv файлы в проект
from kivy.lang import Builder
from kivy.uix.boxlayout import BoxLayout
# импортируем модуль Свойство Объекта 
# для работы с переменными (свойствами) KV файлав
from kivy.properties import ObjectProperty, StringProperty, NumericProperty
# *****************************************************************************************
class Menu(BoxLayout):
    # ----------------------------------------------------------------------
    # доступ к переменным и свойствам класса в KV файлах
    menu = ObjectProperty(None)
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # переменные для работы с GUI
    # информация о вопросах
    info_db = StringProperty(None)
    # выбор темы 
    topic = StringProperty(None)
    # текст вопроса
    qwest = StringProperty(None)
    # количество правильных ответов
    label_qwest_positive_count = StringProperty(None)
    # количество не правильных ответов
    label_qwest_negative_count = StringProperty(None)
    # хранение цвета для правильных ответов и не правильных ответов
    pos_neg_color = StringProperty(None)
    # словарь меню выбора
    dictor_menu = dict(zip(['МАЛЫЕ КОТЛЫ',
                            'БОЛЬШИЕ КОТЛЫ',
                            'БОЛЬШИЕ КОТЛЫ. ТРУБОПРОВОДЫ ПАРА И ГОРЯЧЕЙ ВОДЫ',
                            'БОЛЬШИЕ КОТЛЫ. СОСУДЫ',
                            'ГАЗ. ГАЗОСНАБЖЕНИЕ'],
                            ['МАЛЫЕ КОТЛЫ',
                            'БОЛЬШИЕ КОТЛЫ',
                            'БОЛЬШИЕ КОТЛЫ. ТРУБОПРОВОДЫ ПАРА И ГОРЯЧЕЙ ВОДЫ',
                            'БОЛЬШИЕ КОТЛЫ. СОСУДЫ',
                            'ГАЗ. ГАЗОСНАБЖЕНИЕ']))
    # словарь меню выбора количества вопросов
    dictor_menu_training = dict(zip(['ОБУЧЕНИЕ', 'ЭКЗАМЕН', 'КОЛИЧЕСТВО ВОПРОСОВ'],
                        ['ОБУЧЕНИЕ', 'ЭКЗАМЕН', 'КОЛИЧЕСТВО ВОПРОСОВ']))
    # текст кнопки ДАЛЬШЕ
    next_qwest_button_text = StringProperty('ВЫБЕРИТЕ ОТВЕТ')
    #  максимальное количество вопросов для ползунка (slider)
    count_max_qwest_slider = NumericProperty()
    # ----------------------------------------------------------------------
    # переменные для работы с DB
    # пустой объект для какойто темы вопросов
    pb = None
    # список с номерами вопросов
    keys_list = list()
    # взятый вопрос из список с номерами вопросов keys_list
    qwest_get = str()
    # список с ответами (список словарей)
    ans_list = dict()
    # ----------------------------------------------------------------------
    # метод - определение выбранной темы в обучении
    # сброс на начальные значения глобальных переменных
    # инициализируем информацию о вопросах
    def topic_set(self, topic):
        # количество неправильных вопросов
        # количество правильных вопросов
        # номер вопроса
        # метка обучения (ОБУЧЕНИЕ/ЭКЗАМЕН)
        # выбранное количество вопров в slider
        # сброс на наальные значения переменных проводников
        # Conductor.negative = int()
        # Conductor.positive = int()
        # Conductor.number_qwest = int(1)
        # Conductor.training = str()
        # Conductor.value_qwest_slider = int(1)
        # инициализация переменной с темой
        self.topic = topic
        # инициализируем информацию о вопросах
        self.__info_db_init(topic)
    # ----------------------------------------------------------------------
    # метод - информация о вопросах
    def __info_db_init(self, topic):
        # определение темы
        if self.dictor_menu['МАЛЫЕ КОТЛЫ'] == topic:
            # создаем информацию о вопросах
            self.info_db = 'МАЛЫЕ КОТЛЫ'
        elif self.dictor_menu['БОЛЬШИЕ КОТЛЫ'] == topic:
            # создаем информацию о вопросах
            self.info_db = 'БОЛЬШИЕ КОТЛЫ'
        elif self.dictor_menu['БОЛЬШИЕ КОТЛЫ. ТРУБОПРОВОДЫ ПАРА И ГОРЯЧЕЙ ВОДЫ'] == topic:
            # создаем информацию о вопросах
            self.info_db = 'БОЛЬШИЕ КОТЛЫ. ТРУБОПРОВОДЫ ПАРА И ГОРЯЧЕЙ ВОДЫ'
        elif self.dictor_menu['БОЛЬШИЕ КОТЛЫ. СОСУДЫ'] == topic:
            # создаем информацию о вопросах
            self.info_db = 'БОЛЬШИЕ КОТЛЫ. СОСУДЫ'
        else:
            # создаем информацию о вопросах
            self.info_db = 'ГАЗ'
    # ----------------------------------------------------------------------
# *****************************************************************************************
class Application(App):
    # ----------------------------------------------------------------------
    # создаем стандартный конструктор Kivy: build(self)
    def build(self):
        return Builder.load_file('./kv/MenuStart.kv')
    # ----------------------------------------------------------------------
    # метод - прокрутка экранов (меню)
    def next_screen(self, screen):
        # определение имени KV файла
        filename = screen + '.kv'
        # выгрузить содержимое файла .kv
        # причина: в нем могут быть данные из предыдущих вызовов
        # unload the content of the .kv file
        # reason: it could have data from previous calls
        Builder.unload_file('./kv/' + filename)
        # clear the container
        # очистите контейнер 
        # (переменная достура к свойствам класса Menu в файле root.kv)
        self.root.menu.clear_widgets()
        # load the content of the .kv file
        # загрузить содержимое файла .kv
        info = Builder.load_file('./kv/' + filename)
        # add the content of the .kv file to the container
        # добавьте содержимое файла .kv в контейнер
        self.root.menu.add_widget(info)
    # ----------------------------------------------------------------------
# *****************************************************************************************
# если программа не модуль, то выполнить
if __name__ == '__main__':
    # запускаем приложение
    Application().run()
# *****************************************************************************************