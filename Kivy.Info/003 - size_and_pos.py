Размеры и позиционирование
Размеры
Для задания размера элемента есть два атрибута size и size_hint. По умолчанию используется size_hint, который принимает значения ширины и длины от 0(0% макета) до 1(100% макета). Если значение установлено в 1, то элемент растягивается на весь макет.Если 0 (так же можно установить значения "None"), то элемент не привязывается к размеру макета и тем самым можно установить фиксированное значение элемента с помошью атрибута size в пикселях. Например:
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button

class TestApp( App ):
    def build( self ):
        bl = BoxLayout()
        #Присваим size_hint значение None или 0.Сам size_hint принимает кортеж (ширину и длину)
        #от 0 до 1.Например если нам нужно чтобы элемент занимал 10% макета,то нужно поставить значение 0.1
        #Далее в атрибут size который тоже принимает кортеж устанавливаем в пикселях ширину и длину
        #Обязательно чтобы установить фиксированный размер элементу, нужно size_hint присвоить None или 0
        btn = Button( text = 'ok', size_hint = ( None , None), size = ( 150,150))
        bl.add_widget(btn)
        return bl

if __name__ == '__main__':
    TestApp().run()
Запускаем приложение и видим что кнопка в нижнем левом углу. Размер кнопки составляет заданным нами 150 пикселей по ширине и высоте:

Давайте назначим кнопке 30% размера от макета и посмотрим что получится:
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button

class TestApp( App ):
    def build( self ):
        bl = BoxLayout()
        btn = Button( text = 'ok', size_hint = ( 0.3 , 0.3))
        bl.add_widget(btn)
        return bl

if __name__ == '__main__':
    TestApp().run()

Как мы видим кнопка заняла по ширине 100%(хотя указали 30%), а по длине 30%. Все потому что мы используем макет Box Layout, который распологает элементы по горизонтали или вертикали. По умолчанию Box Layout распологает элементы по горизонтали и так как в нем одна только кнопка, то он растягивает её на всё ширину. Попробуем добавить еще одну кнопку и зададим ей size_hint значение "0.7" по ширине и длине.

Первая кнопка заняла 30% размера макета по ширине, а вторая кнопка 70%
Про макеты более подробно будет сказано в разделе Layouts(Макеты). Главное помнить, что size принимает фиксированное значение ширины и длины в пикселях и только в том случае если значение size_hint установлено в "None" или "0", а size_hint принимает значение от 0 (0% размера макета) до 1 (100% размера макета).
Позиционирование
Для позиционирования элемента применяются атрибуты pos_hint и pos. Атрибут pos принимает кортеж как и size, а вот с pos_hint все немного посложнее. Во-первых атрибуты pos и pos_hint работает не на всех макетах. Во-вторых pos_hint принимает в качестве значения словарь, где ключ это позицонирование по вертикали или горизонтали, а значение так же как и в size_hint от 0(0%) до 1(100%). Рассмотрим pos_hint подробно.
Начальные коориданаты окна это левый нижний угол.

Аттрибут pos_hint принимает словарь координат по x и y.
x - располагает элемент по x. Значение от 0 (0% размера макета) до 1 (100% размера макета).
center_x - выравнивание по центру. Значение от 0 до 1. Если значение равно 0.5 то элемент будет выравнен по центру окна по х.
right - располагает элемент справа окна если значение равно 1. Значение от 0 до 1.
y - располагает элемент по y. Значение от 0 (0% размера макета) до 1 (100% размера макета).
center_y - выравнивание по центру. Значение от 0 до 1. Если значение равно 0.5 то элемент будет выравнен по центру окна по y.
top - располагает элемент вверху окна если значение равно 1. Значение от 0 до 1.
Рассмотрим пример. Расположим кнопку в правом нижнем углу:
from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.button import Button

class PosApp( App ):
    def def( self ):
        fl = FloatLayout()
        #Устанавилваем кнопке фиксированную ширину и длину в 100 пикселей
        #Так как изначально кнопка находится по начальным координатам в левом нижнем углу
        #то меняем только значение по x. Ключу right устанавливаем значение 1
        btn = Button(text = "Кнопка",size_hint = (None, None),size = (100, 100), pos_hint = {'right': 1 })
        fl.add_widget(btn)
        return fl

if __name__ == '__main__':
    PosApp().run()

Теперь попробуем расположить его по центру с помощью "center_x " и "center_y":
btn = Button(text = "Кнопка", size_hint = (None, None), size = (100, 100 ), pos_hint = {'center_x': 0.5 , 'center_y':0.5 })

В качестве домашнего задания попробуйте расположить кнопку по всем углам окна.
Отступы.
Расстояние между элементами
padding - внутренние отступы. Принимает в качетсве значения список из четырех параметров(отступ сверху,слева,сниху,справа). Например padding = [10,20,10,20].
spacing - расстояние между элементами. Принимает в качестве значения список из двух параметров. Это расстояние по горизонтали и по вертикали. Например spacing = [10,20].
Создадим макет Grid Layout(располагает элементы в виде сетки) , где расположим девять кнопок:
from kivy.app import App
from kivy.uix.gridlayout import GridLayout
from kivy.uix.button import Button

class ExampleApp( App ):
    def build( self ):
        #Устанавливаем отсутпы по 10 пикселей с каждой стороны
        # расстояние между элементами по горизонтали 20 пискелей, а по вертикали 30
        gl = GridLayout(cols = 3, padding = [10,10,10,10], spacing = [20,30])
        btn = Button(text = "Кнопка" )
        btn2 = Button(text = "Кнопка")
        btn3 = Button(text = "Кнопка")
        btn4 = Button(text = "Кнопка")
        btn5 = Button(text = "Кнопка")
        btn6 = Button(text = "Кнопка")
        btn7 = Button(text = "Кнопка")
        btn8 = Button(text = "Кнопка")
        btn9 = Button(text = "Кнопка")
        gl.add_widget(btn)
        gl.add_widget(btn2)
        gl.add_widget(btn3)
        gl.add_widget(btn4)
        gl.add_widget(btn5)
        gl.add_widget(btn6)
        gl.add_widget(btn7)
        gl.add_widget(btn8)
        gl.add_widget(btn9)
        return gl
if __name__ == '__main__':
    ExampleApp().run()

Как мы видим по картинке элементы внутри макета Grid Layout сдвинулись на 10 пикселей со всех сторон и появилось расстояние между элементами по горизонтали на 20 пикселей, а по вертикали на 30 пикселей.
