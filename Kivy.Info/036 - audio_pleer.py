Простой аудиоплеер

Создадим простой аудиоплеер. Нам понадобятся дополнительно две библиотеки. Первая эта easygui для отображения диалогового окна выбора файла. Чтобы установить введите в терминале pip install easygui. Вторая библиотека mutagen для того чтобы вычислить длительность трека. Для установки введите в терминале pip install mutagen.Так же нам понадобится класс Timer из пакета threading для обновления позиции ползунка у виджета Slider и для обновления времени в Label. Для аудио нам понадобится класс SoundLoader из модуля kivy.core.audio.
Вот какие виджеты нам понадобятся:
1. Виджет кнопки для загрузки аудиофайла. Будем загружать в формате mp3
2.Виджет Label где будем выводить путь к нашему файлу.
3. Виджет Slider для прокрутки трека. Так же при обновление позиции трека ползунок у слайдера будем двигаться.
4. Три виджета Label. Первый Label будет обновляться время когда будет обнолвяться позиция трека. Второй Label просто косая черта. Третий Label для вывода длитеьности всего трека.
5.Три кнопки Play, Pause, Stop. Кнопка Play для проигрывания, кнопка Pause для паузы трека, кнопка Stop для остановки трека
Создадим два файла player.py для кода и player.kv для разметки. Импортируем все нужные нам классы и модули. Как я и писал нам нужна библиотека easygui и mutagen. Импортируем класс MP3 из mutagen.mp3. Так же мы будем задавать размер окна на этот раз с помощью класса Window из модуля kivy.core.window

Зададим размер окна 400x400 c помошью атрибута size у класса Window

Создадим класс PlayerExample который будет наследоваться от BoxLayout. Создаем переменные как в разметке slider, filename, play, pause, stop, time(виджет Label где будет обновляться текст времени), all_time(виджет Label где будет отображаться общая длительность трека). Так же создадим переменную music_file в неё мы будем присваивать путь к файлу изначально она будет None, переменную sound с помощью которой будем проигрывать и останавливать трек изначально она будет None, перменную timer класса Timer изначально она будет None и переменную seconds которой будет присваивать каждую секунду единицу при проигрывание трека изначально будет равна 0.

Далее напишем метод load_music в этом классе.В разметке присвоем этот метод событию on_press кнопки загузки(она будет называться Load). При нажатии на кнопку будет появляться диалоговое окно с выбором файла и после это загрузим его в переменную sound. Итак:
1.Проверяем условие если timer не равен None то останавливаем timer с помощью timer.cancel()
2.Присваиваем переменной music_file путь к файлу. Мы выберем файл в диалоговом окне и присвоем путь к файлу с помощью easygui.fileopenbox(filetypes=["*.mp3"])
3. Далее проверяем условие если переменная sound не равна None то вызываем метод stop_music который создадим позже. Присваиваем переменной seconds значение 0.Виджету Label которыей будет обновлять позицию трека присвоем "00:00"
4. Проверяем условие если переменная music_file равна None то переменной filename присваиваем текст "No loaded song", переменной all_time присвоем "00:00". В этом же условие напишем если timer не равен None то останавливаем timer с помощью timer.cancel(). И в этом же условии(if self.music_file == None) перменной кнопки play атрибуту disabled присваиваем True(отключаем кнопку).В этом же условии пишем оператор return
5.Переменной sound присваиваем загруженный трек с помощью SoundLoader.load(self.music_file)
6.Создаем переменную audio и присвоем ей информацию о файл с помощью класса MP3 из модуля mutagen.mp3 в качестве параметра передадим путь к файлу(переменная music_file)
7. Переведем размер трека в минуты и секунды создадим переменные m и s и присвоем метод divmod где в качестве первого параметра будет audio.info.length + 1(единицу прибавляем для точного времени), а второго значение 60
8.Приводим отображение времени к формату "минуты:секунды". Содадим переменную t и присвоем ей "%02d:%02d" % (m,s)
9.Присваиваем переменную t переменной all_time
10.Присвоем виджету Slider максимальное значение. Максимальное значение будет длительность загруженного трека. Пишем self.slider.max = int(audio.info.length)
11.Значение самого ползунка ставим 0. Пишем self.slider.value = 0
12. Поставим позицию трека в 0 для этого пишем self.sound.seek(0). Именно с помощью метода seek можно установить позицию трека.
13.Останавливаем проигрывания трека пишем self.sound.stop()
14. Включаем кнопку play c помошью атрибута disabled ставим False15.Переменной timer присваиваем класс Timer в качестве первого параметра будет время через которое сработает timer. У нас будет одна секунда. Вторым параметром пишем метод position которые будет обновлять позицию slider и обновлять текст виджет Label где отображаться в секундах позиция трека. Напишем метод position позже
15.Переменной filename присвоем текст пути к файлу. Для этого пишем self.filename.text = self.sound.source

Далее пишем метод play_music который присвоем событию on_press кнопки Play. Итак пишем:
1.Отключаем кнопку play с помощью атрибута disabled ставим True
2.Включаем кнопку pause с помощью атрибута disabled ставим False
3.Включаем кнопку stop с помощью атрибута disabled ставим False
4.Запускаем проигрывания трека. Пишем self.sound.play()
5.Запускаем timer. Пишем self.timer.start()

Далее пишем метод pause_music который присвоем событию on_press кнопки Pause. Итак пишем:
1.Останавливаем timer. Пишем self.timer.cancel()
2.Создаем переменную pos которой присвоем текущую позицию трека. Пишем pos = self.sound.get_pos()
3.Останавливаем воспроизведение трека. Пишем self.sound.stop()
4.Присваем слайдеру текущее значение позиции трека. Пишем self.slider.value = pos
5. Включаем кнопку play с помошью атрибута disabled ставим False
6.Отключаем кнопку pause с помошью атрибута disabled ставим True
7.Переменной timer присваиваем класс Timer в качестве первого параметра будет время через которое сработает timer. У нас будет одна секунда. Вторым параметром пишем метод position которые будет обновлять позицию slider и обновлять текст виджет Label где отображаться в секундах позиция трека. Напишем метод position позже

Далее пишем метод stop_music который присвоем событию on_press кнопки Stop. Итак пишем:
1.Останавливаем воспроизведение трека. Пишем self.sound.stop()
2.Останавливаем timer. Пишем self.timer.cancel()
3.Включаем кнопку play с помощью атрибута disabled ставим False
4.Переменной timer присваиваем класс Timer в качестве первого параметра будет время через которое сработает timer. У нас будет одна секунда. Вторым параметром пишем метод position которые будет обновлять позицию slider и обновлять текст виджет Label где отображаться в секундах позиция трека. Напишем метод position позже
5.Присваиваем значение ползунка равное 0. Пишем self.slider.value = 0
6.Ставим позицию трека равное 0. Пишем self.sound.seek(0)
7.Отключаем кнопку stop с помощью атрибута disabled ставим True
8.Отключаем кнопку pause с помощью атрибута disabled ставим True

Далее пишем метод position который будет вызывать timer
1.Переменной timer присваиваем класс Timer в качестве первого параметра будет время через которое сработает timer. У нас будет одна секунда. Вторым параметром пишем этот же метод position которые будет обновлять позицию slider и обновлять текст виджет Label где отображаться в секундах позиция трека.
2.Присваиваем значению ползунка слайдера текущию позицию трека. Пишем self.slider.value = self.sound.get_pos()
3.Запускаем timer. Пишем self.timer.start()
4. Увеличиваем значение переменной seconds на 1
5.Вызываем метод time_format который в качестве параметра пишем переменную seconds. Метод timer_format мы напишем позже. Он приводит значение в секундах к формату "минуты:секунды"
6.Далее пишем условие если значение ползунка слайера равен 0 то вызываем метод self.stop_music(), присваиваем значение ползунку 0 self.slider.value = 0, присваиваем переменной seconds значение 0, вызываем метод time_format который в качестве параметра пишем переменную seconds. Метод timer_format мы напишем позже. Он приводит значение в секундах к формату "минуты:секунды"

Далее пишем метод music_position который присвоем событию on_touch_move(срабатывает при перемещении ползунка слайдера) и событию on_touch_up(при отпускание мышки с ползунка слайдера) виджета Slider. Параметр instance это объект который вызывает текущий метод.В данном случае это Slider. Пишем если переменная sound не равна None то устанавливаем позицию трека через значение полузунка у слайдера self.sound.seek(instance.value), присваиваем переменной seconds значение ползунка слайдера self.seconds = instance.value, вызываем метод time_format который в качестве параметра пишем переменную seconds. Метод timer_format мы напишем позже. Он приводит значение в секундах к формату "минуты:секунды"

Теперь пишем метод time_format:
1.Создаем переменные m и s и присвоим им результам метода divmod где в качестве первого параметра будет наше значение в секундах,а вторым значением пишем значение 60
2.Создаем переменую t и присвоем ей %02d:%02d" % (m, s).
3.Присвоем переменной time(виджет Label выводит текущую позицию нашего трека в секундах и минутах) переменную t

C класс PlayerExample все.Теперь пишем класс PlayerApp который будет наследоваться от класса App. Итак:
1.Создаем переменную player и присваиваем изначально None
2.Пишем метод build в котором с помощью метода bind класса Window присваиваем событию on_close(закрытие приложения) метод on_request_close(этот метод нам понадобится для того чтобы останавливать воспроизведение трека и останавливать timer при закрытие приложения). Далее присваем переменной player наш созданный класс PlayerExample и с помощью ключевого cлова return возваращаем player
3.Пишем метод on_request_close. Тут обращаемся к экземпляру класса PlayerExample к player и к переменной sound и останавливаем воспроизведение трека c помощью метода stop() self.player.sound.stop(). Так же обращаемся к экземпляру класса PlayerExample к player и к переменной timer и останавливаем таймер c помощью метода cancel() self.player.timer.cancel()

С кодом все. Теперь посмотрим разметку player.kv


1.Пишем такое же название класса как в коде в треугольных сокбках PlayerExample
2.Присваиваем переменным которые такие же как в коде id виджетов и атрибуту orientation ставим значение vertical
3.Пишем кнопку загрузки. Атрибуту text присваиваем текст 'Load' и событию on_press(нажатие на кнопку) присваиваем наш метод загрузки файла из кода root.load_music()
4.Далее прописываем виджет Label который будет отображать путь к файлу. Присваиваем id:label и начальный текст No song loaded. Размер шрифта 15sp font_size:'15sp'
5.Прописываем Slider. Присваиваем id:slider.Далее событию когда мы передвигаем ползунок on_touch_move и событию отпускания нажатия на slider on_touch_up присваиваем метод написанный в коде music_position и в качестве параметра передаем слайдер(self) root.music_position(self). Атрибуту size_hint присваиваем значение (1,0.1)
6.Пишем макет BoxLayout с тремя виджетами Label. Первому Label присваиваем id:time, атрибуту text присваиваем текст '00:00' и размер шрифта 50sp font_size:'50sp'. Второй Label это просто косая черта. Так же ставим размер шрифта 50sp и size_hint присваиваем значение (0.01,1). Третий виджет Label это общее время трека. Присваиваем id:all_time, атрибуту text присваиваем текст '00:00' и размер шрифта 50sp
7.Пишем макет BoxLayout c тремя кнопками. Первая кнопка Play которая будет запускать воспроизведение трека. Присваиваем id:play, атрибуту text присваиваем текст 'Play', отключаем с помощью атрибута disabled поставив значение True и событию on_press присваиваем метод из кода root.play_music(). Вторая кнопка Pause при нажатии на которую трек будет ставиться на паузу. Присваиваем id:pause, атрибуту text присваиваем текст 'Pause', отключаем с помощью атрибута disabled поставив значение True и событию on_press присваиваем метод из кода root.pause_music(). Третья кнопка Stop при нажатии на которую трек будет останавливаться и ползунок Slider будет переходит в начальную позицию слайдера. Присваиваем id:stop, атрибуту text присваиваем текст 'Stop', отключаем с помощью атрибута disabled поставив значение True и событию on_press присваиваем метод из кода root.stop_music()
