'''
История программиста Джека

Герой нашей истории, молодой и амбициозный программист по имени Джек, сталкивается 
с таинственными сбоями в своем коде, которые приводят к непредсказуемым ошибкам. 
Он решил использовать свои навыки и знания в библиотеке NumPy, чтобы разобраться 
в этой проблеме и вернуть свой код к жизни.

Джек обнаружил, что одним из способов решения проблемы является использование 
функции np.where для работы с одномерными массивами. Его задача заключается в том, 
чтобы создать массив, состоящий из элементов массива A, но измененного в зависимости 
от соотношения между элементами массива А и B. Если элемент A[i] меньше элемента B[i], 
то он должен быть умножен на 2, а если больше или равен, то он должен быть уменьшен 
на 2 и записан в новый массив.

Джек начал работу над задачей, но скоро сталкивается с новым условием. Он понимает, 
что необходимо проверить, существуют ли в массивах A и B значения, которые меньше 
или равны 0. Если это так, то он должен заменить эти значения на 1.

Джек чувствует, что время работает против него, и каждую секунду его код погружается 
все глубже в таинственную ошибку. Сможет ли он использовать функцию np.where, чтобы 
решить эту задачу и спасти свой код? Или же его код обречен на провал.
'''
import numpy as np
from sys import stdin
stdin = open(file='141.csv', mode='rt', encoding='utf-8', newline='')

if __name__ == '__main__':
#     arr = np.fromstring(
#         string=stdin.read(),
#         # dtype=int,
#         dtype=float,
#         sep = ' '
#     )
#     print(arr) # test #
#     print(type(arr)) # test #

    # arr1, arr2, arr3, *_ = (np.fromstring(string=i, dtype=int, sep=' ') for i in stdin)
    # print(arr1, arr2, arr3, sep='\n')

    # arr1, arr2, *_ = (np.array(object=i.split(), dtype=str) for i in stdin)
    # arr1, arr2, *_ = (np.fromstring(string=i, dtype=int, sep=' ') for i in stdin)
    arr1, arr2, *_ = (np.array(i.split(), dtype=int) for i in stdin)
    # arr1, *_ = (np.fromstring(string=i, dtype=int, sep=' ') for i in stdin)
    print(arr1) # test
    print(arr2) # test

    arr1 = np.where(1 > arr1, 1, arr1)
    arr2 = np.where(1 > arr2, 1, arr2)

    print(*np.where(arr1 < arr2, arr1 * 2, arr1 - 2))