'''
Алхимическая спасательная операция

В темном и мрачном подвале античного здания, заброшенном уже на протяжении многих лет, 
жил одинокий алхимик. Он посвятил свою жизнь изучению древних знаний и проводил свои 
эксперименты в тайной лаборатории, спрятанной глубоко под землей.

Но когда-то, в результате неудачного эксперимента, он пробудил древнее зло, спящее в 
темных глубинах подвала. Это зло стало постепенно поглощать все вокруг себя, заставляя 
стены трескаться и потолки обваливаться. Алхимик осознал, что единственный способ 
остановить это зло - найти наименьшее общее кратное двух мощных заклинаний, 
которые были использованы в эксперименте.

Он обратился к своей библиотеке, на полках которой были хранятся древние книги 
с магическими знаниями, и извлек оттуда два древних свитка с заклинаниями. 
Но чтобы найти наименьшее общее кратное, он использовал функцию lcm из библиотеки numpy. 
Он знал, что это был его последний шанс спасти себя и окружающий мир от тьмы, 
и он старался сделать все, что в его силах, чтобы добыть необходимую информацию.

Таким образом, функция lcm из библиотеки numpy стала последней надеждой алхимика 
на спасение мира от древнего зла, которое он сам разбудил, и его успех зависел от того, 
насколько быстро и точно он сможет использовать эту функцию, чтобы найти наименьшее 
общее кратное двух мощных заклинаний.

На вход поступают две последовательности мощных заклинаний в виде строки магических 
чисел разделенных пробелом. Ваша задача вывести НОК для каждой пары соответсвующих 
чисел из этих двух строк.

Sample Input:
1316 440 1661 184 1813 1243 1253 1831 1682 1477 1603 441 1235 1634 989 371 699 12 1287 1235 503 689 798 664
1651 1526 1142 33 620 624 167 388 1103 343 1393 481 18 715 757 458 1064 253 1860 115 1110 1707 1354 701

Sample Output:
2172716 335720 1896862 6072 1124060 775632 209251 710428 1855246 72373 318997 212121 22230 1168310 748673 169918 743736 3036 797940 28405 558330 1176123 540246 465464
'''
import numpy as np
from sys import stdin
stdin = open(file='123.csv', mode='rt', encoding='utf-8', newline='')

if __name__ == '__main__':
#     arr = np.fromstring(
#         string=stdin.read(),
#         # dtype=int,
#         dtype=float,
#         sep = ' '
#     )
#     print(arr) # test #
#     print(type(arr)) # test #

    arr1, arr2 = (np.fromstring(string=i, dtype=int, sep=' ') for i in stdin)
    print(arr1, arr2, sep='\n')