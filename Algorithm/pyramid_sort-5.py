###############################################################################################
# Основной алгоритм сортировки кучей для N потомков
def NHeapSort(data):

    n = 3 # Сколько потомков у родителя

    # Формируем первоначальное сортирующее дерево
    # Для этого справа-налево перебираем элементы массива
    # (у которых есть потомки) и делаем для каждого из них просейку
    for start in range(len(data), -1, -1):
        NHeapSift(data, n, start, len(data) - 1) 

    # Первый элемент массива всегда соответствует корню сортирующего дерева
    # и поэтому является максимумом для неотсортированной части массива.
    for end in range(len(data) - 1, 0, -1): 
        # Меняем этот максимум местами с последним 
        # элементом неотсортированной части массива
        data[end], data[0] = data[0], data[end]
        # После обмена в корне сортирующего дерева немаксимальный элемент
        # Восстанавливаем сортирующее дерево
        # Просейка для неотсортированной части массива
        NHeapSift(data, n, 0, end - 1)
    return data
    
# Просейка сверху-вниз для родителя у которого N потомков
def NHeapSift(data, n, start, end):
    
    # Начало подмассива - узел, с которого начинаем просейку вниз
    root = start 

    while True:
        
        # Первого потомка (если он в пределах подмассива)
        # назначаем максимальным потомком
        child = root * n + 1
        if child > end: 
            break 

        max = child
        
        # Среди потомков определяем максимального
        for k in range(2, n + 1):
            current = root * n + k
            if current > end:
                break
                
            if data[current] > data[max]:
                max = current
        
        # Если максимальный потомок больше родителя
        # то меняем их местами и этот потомок сам
        # становится родителем
        if data[root] < data[max]:
            data[root], data[max] = data[max], data[root]
            root = max
        else:
            break
###############################################################################################